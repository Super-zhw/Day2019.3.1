基于代理类的AOP实现
实际上，spring中的AOP代理默认是使用JDK动态代理的方式来实现的。
使用ProxyFactoryBean是创建AOP代理的最基本方式。

切面是切面，代理是代理，区分清楚
import org.aopalliance.intercept.MethodInterceptor;（环绕通知）
在目标方法执行前后实施增强，可以应用于日志、事务管理
org.springframework.aop.MethodBeforeAdvice; （前置通知）
权限管理
org.springframework.aop.AfterReturningAdvice;  （后置通知）
关闭流、上传文件、删除临时文件
org.springframework.aop.ThrowsAdvice; （异常通知）
处理异常记录日志
org.springframework.aop.IntroductionInterceptor; （引介通知）
在目标类中添加一些新的方法和属性，可以应用于修改老版本程序（增强类）

ProxyFactoryBean类中常用配置属性
target 代理的目标对象



